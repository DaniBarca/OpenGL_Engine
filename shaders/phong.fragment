#version 330 core

precision highp float;

in vec3 fragment_normal;
in vec3 fragment_position;
in vec2 UV;
in vec3 shadow_coord;

//vec3 right;
//vec3 up;

// Ouput data
out vec3 color;

uniform vec3 point_positions   [%N_POINT_LIGHTS%];
uniform vec3 point_colors      [%N_POINT_LIGHTS%];
uniform float point_intensities[%N_POINT_LIGHTS%];
uniform float point_shininess  [%N_POINT_LIGHTS%];

uniform vec3 spot_positions    [%N_SPOT_LIGHTS%];
uniform vec3 spot_colors       [%N_SPOT_LIGHTS%];
uniform vec3 spot_directions   [%N_SPOT_LIGHTS%];
uniform float spot_intensities [%N_SPOT_LIGHTS%];
uniform float spot_shininess   [%N_SPOT_LIGHTS%];
uniform vec2 spot_angles       [%N_SPOT_LIGHTS%];
uniform float spot_sampling_offset;

uniform vec3 directional_positions    [%N_DIRECTIONAL_LIGHTS%];
uniform vec3 directional_colors       [%N_DIRECTIONAL_LIGHTS%];
uniform vec3 directional_directions   [%N_DIRECTIONAL_LIGHTS%];
uniform float directional_intensities [%N_DIRECTIONAL_LIGHTS%];
uniform float directional_shininess   [%N_DIRECTIONAL_LIGHTS%];

uniform float reflectivity_diffuse;
uniform float reflectivity_specular;
uniform float reflectivity_ambient;

uniform vec3 ambient_color;
uniform float ambient_intensity;

uniform vec3 camera_position;

uniform sampler2D albedo;
uniform sampler2D shadow;

vec3 N;

vec3 reflect(vec3 v){
    return -v + 2 * dot(v,N) * N;
}

float ambient(){
    return ambient_intensity * reflectivity_ambient;
}

// I  -> Intensity
// r  -> Material reflectivity
// usl-> Normalized vector from surface to light
// ur -> Normalized reflection of light
// usc-> Normalized vector from surface to camera
// shi-> Light shininess, the specular exponent
// uN -> Surface normal

//
// POINT LIGHT
//

// Diff = I * r * ( usl . N )
float point_diffuse(int index){
    return point_intensities[index] * reflectivity_diffuse * clamp(dot(N, normalize(point_positions[index] - fragment_position)),0.0f,1.0f);
}

// Spec = I * r * (ur . usc) ^ shi
float point_specular(int index){
    return point_intensities[index] * reflectivity_specular * clamp(pow( dot(reflect(normalize(point_positions[index] - fragment_position)), normalize(camera_position - fragment_position) ), point_shininess[index]), 0.0f,1.0f);
}

//
// SPOT LIGHT
//

//
// Given a value x this function returns:
//
// 1|------- 
//  |       \
//  |        \
// 0+-----------
//         A  B

// Which is:
// | f(x) = 1 from 0 to A
// | f(x) = (1 - ((x - A)/(B - A)) ) from A to B
// | f(x) = 0 elsewhere

// This function determines visibility and intensity of the spot light
float spotlight_Intensity_ByAngle(float x, float A, float B){
    return clamp(1.0f - ((x - A)/(B - A)), 0.0f, 1.0f );
}

float spot_diffuse(int index){
    float A = 1.0 - cos(spot_angles[index].x * 0.5f);
    float B = 1.0 - cos(spot_angles[index].y * 0.5f);

    vec3 light_to_frag = normalize(fragment_position - spot_positions[index]);
    
    float angle = 1.0 - dot(light_to_frag, spot_directions[index]);

    return spotlight_Intensity_ByAngle(angle, A, B) * spot_intensities[index] * reflectivity_diffuse * clamp(dot(N, normalize(spot_positions[index] - fragment_position)),0.0f,1.0f);
}

float spot_specular(int index){
    return spot_intensities[index] * reflectivity_specular * clamp(pow( dot(reflect(normalize(spot_positions[index] - fragment_position)), normalize(camera_position - fragment_position) ), spot_shininess[index]), 0.0f,1.0f);
}

//
// DIRECTIONAL LIGHT
//

// Directional light behaves the same as point light, but surface to light (usl) will always be (-direction)
float directional_diffuse(int index){
    return directional_intensities[index] * reflectivity_diffuse * clamp(dot(N, normalize(-directional_directions[index])),0.0f,1.0f);
}

float directional_specular(int index){
    return directional_intensities[index] * reflectivity_specular * clamp(pow( dot(reflect(normalize(directional_positions[index] - fragment_position)), normalize(camera_position - fragment_position) ), directional_shininess[index]), 0.0f,1.0f);
}

//

vec3 getPointLight(int index){
    return clamp(point_diffuse(index) + point_specular(index),0.0f,1.0f) * point_colors[index];
}

vec3 getSpotLight(int index){
    return clamp(spot_diffuse(index) + spot_specular(index),0.0f,1.0f) * spot_colors[index];
}

vec3 getDirectionalLight(int index){
    return clamp(directional_diffuse(index) + directional_specular(index),0.0f,1.0f) * directional_colors[index];
}

void main()
{
    N = normalize(fragment_normal);

    //vec3 tocross = vec3(
    //    float(abs(N.x - 0.0f) < 0.01f && abs(N.y - 1.0f) < 0.01f && abs(N.z - 0.0f) < 0.01f),
    //    float(!(abs(N.x - 0.0f) < 0.01f && abs(N.y - 1.0f) < 0.01f && abs(N.z - 0.0f) < 0.01f)),
    //    0.0f
    //);

    //right = normalize(cross(N, tocross));
    //up = normalize(cross(N,right));
    
    vec3 albedo = texture( albedo, UV ).rgb;
    color = vec3(0.0);

    color += albedo * ambient_color * ambient();

    if ( (texture( shadow, shadow_coord.xy ).z + 0.35)  <  shadow_coord.z){
        color = vec3(1.0);
        return;
    }

    for(int i = 0; i < %N_POINT_LIGHTS%; ++i){
        color += albedo * getPointLight(i);
    }

    for(int i = 0; i < %N_SPOT_LIGHTS%; ++i){
        color += albedo * getSpotLight(i);
    }

    for(int i = 0; i < %N_DIRECTIONAL_LIGHTS%; ++i){
        color += albedo * getDirectionalLight(i);
    }
}
